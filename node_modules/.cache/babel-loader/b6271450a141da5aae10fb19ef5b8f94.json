{"ast":null,"code":"import { config } from \"./utils\";\n\nclass Api {\n  constructor(config) {\n    this._url = config.url;\n    this._headers = config.headers;\n  }\n\n  _getResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {\n      headers: this._headers\n    }).then(this._getResponse);\n  }\n\n  getUserInfo() {\n    return fetch(`${this._url}/users/me`, {\n      headers: this._headers\n    }).then(this._getResponse);\n  }\n\n  setUserInfo(data) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(this._getResponse);\n  }\n\n  setCardServer(data) {\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(this._getResponse);\n  }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    return fetch(`${this._url}/cards/likes/${cardId}`, {\n      method: isLiked ? 'PUT' : 'DELETE',\n      headers: this._headers\n    }).then(this._getResponse);\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._getResponse);\n  }\n\n  changeAvatar(data) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._getResponse);\n  }\n\n}\n\nconst api = new Api(config);\nexport default api;","map":{"version":3,"sources":["/Users/pavelglazkov/Desktop/dev/react-mesto-auth/src/utils/api.js"],"names":["config","Api","constructor","_url","url","_headers","headers","_getResponse","res","ok","json","Promise","reject","status","getInitialCards","fetch","then","getUserInfo","setUserInfo","data","method","body","JSON","stringify","name","about","setCardServer","link","changeLikeCardStatus","cardId","isLiked","deleteCard","changeAvatar","avatar","api"],"mappings":"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","sourcesContent":["import {config} from \"./utils\";\nclass Api {\n    constructor(config) {\n        this._url = config.url;\n        this._headers = config.headers;\n    }\n\n    _getResponse(res) {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n    }\n\n    getInitialCards() {\n        return fetch(`${this._url}/cards`, {\n            headers: this._headers\n        })\n            .then(this._getResponse)\n    }\n\n    getUserInfo() {\n        return fetch(`${this._url}/users/me`, {\n            headers: this._headers\n        })\n            .then(this._getResponse)\n    }\n\n    setUserInfo(data) {\n        return fetch(`${this._url}/users/me`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: data.name,\n                about: data.about\n            })\n        })\n            .then(this._getResponse)\n    }\n\n    setCardServer(data) {\n        return fetch(`${this._url}/cards`, {\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: data.name,\n                link: data.link\n            })\n        })\n            .then(this._getResponse)\n    }\n\n  changeLikeCardStatus(cardId, isLiked) {\n        return fetch(`${this._url}/cards/likes/${cardId}`, {\n            method: isLiked ? 'PUT' : 'DELETE',\n            headers: this._headers\n        })\n            .then(this._getResponse)\n    }\n\n    deleteCard(cardId) {\n        return fetch(`${this._url}/cards/${cardId}`, {\n            method: 'DELETE',\n            headers: this._headers\n        })\n            .then(this._getResponse)\n    }\n\n\n    changeAvatar(data) {\n        return fetch(`${this._url}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: data.avatar,\n            })\n        })\n            .then(this._getResponse)\n    }\n}\n\nconst api = new Api(config);\nexport default api;"]},"metadata":{},"sourceType":"module"}